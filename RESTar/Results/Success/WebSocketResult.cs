using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using RESTar.Logging;
using RESTar.Requests;
using RESTar.Results.Error;

namespace RESTar.Results.Success
{
    internal class SwitchedTerminal : WebSocketResult
    {
        /// <inheritdoc />
        public override TimeSpan TimeElapsed { get; protected set; }

        internal SwitchedTerminal(IRequest request) : base(request)
        {
            StatusCode = HttpStatusCode.OK;
            StatusDescription = "Switched terminal";
            TimeElapsed = request.TimeElapsed;
        }
    }

    /// <inheritdoc />
    /// <summary>
    /// Returned when a WebSocket upgrade request failed
    /// </summary>
    public class WebSocketUpgradeFailed : WebSocketResult
    {
        private RESTarError Error { get; }

        /// <inheritdoc />
        public override TimeSpan TimeElapsed { get; protected set; }

        /// <inheritdoc />
        internal WebSocketUpgradeFailed(RESTarError error, IRequest request) : base(request)
        {
            StatusCode = error.StatusCode;
            StatusDescription = error.StatusDescription;
            TimeElapsed = request.TimeElapsed;
            Headers = error.Headers;
            Error = error;
        }
    }

    /// <inheritdoc />
    /// <summary>
    /// Returned when a WebSocket upgrade was performed successfully, and RESTar has taken over the 
    /// context from the network provider.
    /// </summary>
    public class WebSocketUpgradeSuccessful : WebSocketResult
    {
        /// <inheritdoc />
        public override TimeSpan TimeElapsed { get; protected set; }

        internal WebSocketUpgradeSuccessful(IRequest request) : base(request)
        {
            StatusCode = HttpStatusCode.SwitchingProtocols;
            StatusDescription = "Switching protocols";
            TimeElapsed = request.TimeElapsed;
        }
    }

    /// <inheritdoc />
    /// <summary>
    /// A base class for results generated by WebSocket requests
    /// </summary>
    public abstract class WebSocketResult : Result
    {
        /// <inheritdoc />
        protected WebSocketResult(ITraceable trace) : base(trace) { }
    }
}